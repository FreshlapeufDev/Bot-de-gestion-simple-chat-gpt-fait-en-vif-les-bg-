import sys
import subprocess
import discord
from discord.ext import commands
import os
import random
import io
import asyncio
from datetime import datetime
from collections import defaultdict
import json
from database import add_invitation, get_top_inviters, get_invitation_count

warns_via_bot = set()

# === DISCORD BOT CONFIGURATION ===
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True


class MyBot(commands.Bot):
    async def setup_hook(self):
        # Charge les vues persistantes au d√©marrage
        self.add_view(VerifButton())
        self.add_view(TicketView())
        self.add_view(CloseButton())


        # Si tu as toujours le syst√®me de rappel de vote
        self.loop.create_task(vote_reminder())

bot = MyBot(command_prefix="!", intents=intents)

# === CONSTANTES ===
CATEGORY_IDS = {
    "ill√©gal": 1400837942896885941,
    "legal": 1400838697775268002,
    "remboursement": 1400838778842513440,
    "candidature": 1400838818969423873,
    "wipe": 1400838858311991306,
    "mortrp": 1400838898665390213,
    "d√©velopement": 1400838951417155736,
    "sc√®nerp": 1400839015481086032,
}
VERIF_CHANNEL_ID = 1399517854675501111
CITOYEN_ROLE_ID = 1399517854142955682
STAFF_ROLE_ID = 1400835637313016031
LOG_CHANNEL_ID = 1399517856219140195
WARN_LOG_CHANNEL_ID = 1400837645139181739
WARN_ROLE_ID = 1400845159721209888
VOTE_CHANNEL_ID = 1400183110133350400 
LOG_GIVEAWAY_CHANNEL_ID = 1399517856420597961


invite_cache = {}

# === MESSAGE AUTO VOTE ===

async def vote_reminder():
    await bot.wait_until_ready()
    channel = bot.get_channel(VOTE_CHANNEL_ID)
    if not channel:
        print("‚ùå Salon de vote introuvable.")
        return

    while not bot.is_closed():
        try:
            embed = discord.Embed(
                title="üó≥Ô∏è Vote pour Isolya FA V1 !",
                description="**Vote toutes les 2 heures pour nous soutenir !**\nüëâ [Vote ici](https://top-serveurs.net/gta/isolyafa)",
                color=0x00ff00
            )
            embed.set_footer(text="Merci de ton soutien ‚ù§Ô∏è")
            await channel.send(embed=embed)
        except Exception as e:
            print(f"Erreur dans le rappel de vote : {e}")
        await asyncio.sleep(2 * 60 * 60)  # 2 heures

# === BOT EVENTS ===
@bot.event
async def on_ready():

    # === Actualiser les invitations pour tous les serveurs ===
    for guild in bot.guilds:
        try:
            invite_cache[guild.id] = await guild.invites()
        except:
            invite_cache[guild.id] = []


    # === Message de statut ===
    channel = bot.get_channel(1400837582752845865)
    if channel:
        await channel.send("‚úÖ Le bot est de nouveau en ligne !")

    print(f"[‚úÖ BOT EN LIGNE] Connect√© en tant que {bot.user}")


@bot.event
async def on_member_join(member):
    guild = member.guild
    channel = bot.get_channel(1399517854675501112)  # Ton salon de bienvenue

    # === Message de bienvenue classique ===
    embed = discord.Embed(
        title=f"üëã Bienvenue {member.display_name} !",
        description="üìú Lis bien le r√®glement et r√©gale-toi en jeu üéÆ",
        color=0x3498db
    )
    embed.set_footer(text="Bienvenue sur Isolya FA V1")
    if channel:
        await channel.send(embed=embed)

    # === Syst√®me de suivi d‚Äôinvitations ===
    try:
        invites_before = invite_cache.get(guild.id, [])
        invites_after = await guild.invites()

        used_invite = None
        for invite in invites_before:
            for new_invite in invites_after:
                if invite.code == new_invite.code and invite.uses < new_invite.uses:
                    used_invite = new_invite
                    break

        invite_cache[guild.id] = invites_after  # Met √† jour le cache

        if used_invite and used_invite.inviter:
            inviter = used_invite.inviter

            # Ajoute l'invitation en base PostgreSQL
            add_invitation(inviter.id)
            count = get_invitation_count(inviter.id)

            if channel:
                await channel.send(
                    f"üß≠ {member.mention} a √©t√© invit√© par **{inviter.name}**.\n"
                    f"üéâ {inviter.name} a maintenant **{count} invitation(s)** !"
                )
        else:
            if channel:
                await channel.send(f"‚ÑπÔ∏è {member.mention} a rejoint, mais je ne sais pas avec quelle invitation.")

    except Exception as e:
        print(f"[‚ùå ERREUR on_member_join] {e}")



# === COMMANDE REBOOT ===
@bot.command()
@commands.is_owner()
async def reboot(ctx):
    await ctx.send("üîÑ Le bot red√©marre...")
    await bot.close()
    subprocess.call([sys.executable, __file__])

# === COMMANDE BONJOUR ===
@bot.command()
async def bonjour(ctx):
    await ctx.send(f"Bonjour {ctx.author} !")

@bot.command()
async def ping(ctx):
    await ctx.send("Pong !")

@bot.command()
async def pileouface(ctx):
    await ctx.send(random.choice(["Pile", "Face"]))

@bot.command()
async def roll(ctx):
    await ctx.send(random.randint(1, 6))

# === VERIFICATION BUTTON ===
class VerifButton(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="‚úÖ Accepter le r√®glement", style=discord.ButtonStyle.success, custom_id="verif_button")
    async def verif(self, interaction: discord.Interaction, button: discord.ui.Button):
        role = interaction.guild.get_role(CITOYEN_ROLE_ID)
        if not role:
            return await interaction.response.send_message("‚ùå R√¥le introuvable. Merci de contacter un admin.", ephemeral=True)
        if role in interaction.user.roles:
            return await interaction.response.send_message("‚úÖ Tu as d√©j√† le r√¥le Citoyen.", ephemeral=True)
        if role >= interaction.guild.me.top_role:
            return await interaction.response.send_message("‚ùå Le r√¥le est au-dessus du bot. Corrige les permissions.", ephemeral=True)
        try:
            await interaction.user.add_roles(role, reason="Acceptation du r√®glement")
            await interaction.response.send_message("üéâ Tu as accept√© le r√®glement !", ephemeral=True)
        except discord.Forbidden:
            await interaction.response.send_message("‚ùå Permission refus√©e. Contacte un admin.", ephemeral=True)

@bot.command()
@commands.has_permissions(administrator=True)
async def setupverif(ctx):
    if ctx.channel.id != VERIF_CHANNEL_ID:
        return await ctx.send("‚ùå Cette commande doit √™tre utilis√©e dans le salon de v√©rification.")

    reglement = (
        "**R√àGLEMENT DU DISCORD ‚Äî Isolya FA V1**\n"
        "Bienvenue sur le Discord officiel de **Isolya FA V1**.\n"
        "Merci de lire attentivement ce r√®glement avant toute participation.\n\n"
        "**1. Respect & Comportement**\n"
        "Aucune insulte, discrimination, harc√®lement ou propos haineux.\n\n"
        "**2. Utilisation des canaux**\n"
        "Respecte les canaux et ne spamme pas.\n\n"
        "**3. Noms & avatars**\n"
        "Pseudos et avatars corrects obligatoires.\n\n"
        "**4. Publicit√© & Spam**\n"
        "Interdits sans autorisation.\n\n"
        "**5. Contenu interdit**\n"
        "Pas de contenu NSFW, ill√©gal, ou choquant.\n\n"
        "**6. R√®glement du serveur FiveM**\n"
        "RP uniquement en jeu. R√®glement IG √† respecter.\n\n"
        "**7. Sanctions**\n"
        "Le staff peut sanctionner sans pr√©avis.\n\n"
        "*En rejoignant le serveur, tu acceptes ce r√®glement.*"
    )

    embed = discord.Embed(
        title="üìú R√®glement Discord - Isolya FA V1",
        description=reglement,
        color=0xf1c40f
    )
    embed.set_footer(text="Clique sur le bouton ci-dessous pour accepter le r√®glement")
    await ctx.send(embed=embed, view=VerifButton())

# === WARN STAFF  ===

@bot.command()
async def warn(ctx, member: discord.Member = None, *, reason: str = None):
    staff_role = ctx.guild.get_role(STAFF_ROLE_ID)
    warn_role = ctx.guild.get_role(WARN_ROLE_ID)

    if staff_role not in ctx.author.roles:
        return await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")

    if member is None or reason is None:
        return await ctx.send("‚ùó Utilisation : !warn @utilisateur raison")

    # Ajoute le r√¥le warn
    if warn_role:
        if warn_role not in member.roles:
            try:
                warns_via_bot.add(member.id)  # ‚Üê on ajoute l'ID ici !
                await member.add_roles(warn_role, reason="Avertissement (warn)")
            except discord.Forbidden:
                return await ctx.send("‚ùå Je n'ai pas la permission d'ajouter le r√¥le √† ce membre.")
        else:
            await ctx.send("‚ö†Ô∏è L'utilisateur a d√©j√† le r√¥le warn.")
    else:
        await ctx.send("‚ùå Le r√¥le warn est introuvable.")

    # Envoie un MP √† l'utilisateur
    try:
        await member.send(f"‚ö†Ô∏è Tu as √©t√© averti sur **{ctx.guild.name}** pour la raison : {reason}.")
    except:
        pass  # Si l'utilisateur a ses DM ferm√©s

    # Log dans le salon
    log_channel = ctx.guild.get_channel(WARN_LOG_CHANNEL_ID)
    if log_channel:
        embed = discord.Embed(
            title="üö® Avertissement (Warn)",
            description=f"**Membre :** {member.mention}\n**Par :** {ctx.author.mention}\n**Raison :** {reason}",
            color=discord.Color.orange(),
            timestamp=datetime.utcnow()
        )
        await log_channel.send(embed=embed)

    await ctx.send(f"‚úÖ {member.mention} a √©t√© averti et a re√ßu le r√¥le warn.")

# Retire le r√¥le warn

@bot.command()
async def unwarn(ctx, member: discord.Member = None):
    staff_role = ctx.guild.get_role(STAFF_ROLE_ID)
    warn_role = ctx.guild.get_role(WARN_ROLE_ID)

    if staff_role not in ctx.author.roles:
        return await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")

    if member is None:
        return await ctx.send("‚ùó Utilisation : !unwarn @utilisateur")

    if warn_role not in member.roles:
        return await ctx.send("‚ÑπÔ∏è Cet utilisateur n‚Äôa pas le r√¥le warn.")

    try:
        await member.remove_roles(warn_role, reason="Retrait de l'avertissement")
        await ctx.send(f"‚úÖ Le r√¥le warn a √©t√© retir√© de {member.mention}.")
    except discord.Forbidden:
        await ctx.send("‚ùå Je n‚Äôai pas les permissions pour retirer ce r√¥le.")

    # Log dans le salon
    log_channel = ctx.guild.get_channel(WARN_LOG_CHANNEL_ID)
    if log_channel:
        embed = discord.Embed(
            title="‚úÖ Avertissement retir√© (Unwarn)",
            description=f"**Membre :** {member.mention}\n**Par :** {ctx.author.mention}",
            color=discord.Color.green(),
            timestamp=datetime.utcnow()
        )
        await log_channel.send(embed=embed)

# === WARN A LA MAIN ===

@bot.event
async def on_member_update(before, after):
    warn_role = after.guild.get_role(WARN_ROLE_ID)
    log_channel = after.guild.get_channel(WARN_LOG_CHANNEL_ID)

    if not warn_role or not log_channel:
        return

    await asyncio.sleep(4)  # Attend que les logs soient bien enregistr√©s

    # === R√¥le WARN ajout√© ===
    if warn_role not in before.roles and warn_role in after.roles:
        # On ignore le log si c'est le bot qui a warn (commande)
        if after.id in warns_via_bot:
            warns_via_bot.remove(after.id)
            return

        added_by = "‚ùì Inconnu (non trouv√© dans les logs)"
        async for entry in after.guild.audit_logs(limit=10, action=discord.AuditLogAction.member_role_update):
            if entry.target.id == after.id and warn_role in entry.changes.after:
                added_by = entry.user.mention
                break

        embed = discord.Embed(
            title="‚ö†Ô∏è R√¥le WARN ajout√© √† la main",
            description=(
                f"**Membre warn :** {after.mention}\n"
                f"**Ajout√© par :** {added_by}"
            ),
            color=discord.Color.orange(),
            timestamp=datetime.utcnow()
        )
        await log_channel.send(embed=embed)

    # === R√¥le WARN retir√© ===
    elif warn_role in before.roles and warn_role not in after.roles:
        removed_by = "‚ùì Inconnu (non trouv√© dans les logs)"
        async for entry in after.guild.audit_logs(limit=10, action=discord.AuditLogAction.member_role_update):
            if entry.target.id == after.id and warn_role in entry.changes.before:
                removed_by = entry.user.mention
                break

        embed = discord.Embed(
            title="‚úÖ R√¥le WARN retir√© √† la main",
            description=(
                f"**Membre :** {after.mention}\n"
                f"**Retir√© par :** {removed_by}"
            ),
            color=discord.Color.green(),
            timestamp=datetime.utcnow()
        )
        await log_channel.send(embed=embed)

# === !invites ===

@bot.command()
async def invites(ctx, member: discord.Member = None):
    """Affiche le nombre d'invitations d'un membre."""
    member = member or ctx.author
    count = get_invitation_count(member.id)
    await ctx.send(f"üîó {member.mention} a actuellement **{count} invitation(s)** .")


@bot.command()
async def topinvites(ctx):
    """Classement des meilleurs inviteurs (base PostgreSQL)"""
    top = get_top_inviters(10)
    msg = "**Top Inviteurs :**\n"
    for i, (user_id, invite_count) in enumerate(top, 1):
        member = ctx.guild.get_member(int(user_id))
        name = member.display_name if member else f"User {user_id}"
        msg += f"{i}. {name} ‚Äî {invite_count} invitations\n"
    await ctx.send(msg)



# === FERMETURE DE TICKET AVEC TRANSCRIPTION ===
class CloseButton(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="üîí Fermer le ticket", style=discord.ButtonStyle.danger, custom_id="close_ticket_button")
    async def close_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        ticket_channel = interaction.channel
        log_channel = interaction.guild.get_channel(LOG_CHANNEL_ID)

        messages = [msg async for msg in ticket_channel.history(limit=100)]
        messages.reverse()

        lines = [f"Ticket : {ticket_channel.name}", f"Ferm√© par : {interaction.user}", f"Date : {datetime.utcnow()} UTC", "\n--- Messages ---\n"]
        for msg in messages:
            timestamp = msg.created_at.strftime('%Y-%m-%d %H:%M:%S')
            author = f"{msg.author} (ID: {msg.author.id})"
            content = msg.content.strip()
            if content:
                lines.append(f"[{timestamp}] {author} : {content}")

        transcript = "\n".join(lines)
        file = discord.File(io.StringIO(transcript), filename=f"{ticket_channel.name}.txt")

        if log_channel:
            await log_channel.send(
                content=f"üì§ Ticket ferm√© : `{ticket_channel.name}` par {interaction.user.mention}",
                file=file
            )

        await interaction.response.send_message("‚è≥ Ticket ferm√© dans 5 secondes...", ephemeral=True)
        await asyncio.sleep(5)
        await ticket_channel.delete()

# === MENU POUR CR√âER UN TICKET ===
class TicketSelect(discord.ui.Select):
    def __init__(self):
        options = [
            discord.SelectOption(label="Ticket Ill√©gal", value="ill√©gal", description="‚û°Ô∏è Probl√®me ou demande ill√©gal"),
            discord.SelectOption(label="Ticket Legal", value="legal", description="‚û°Ô∏è Probl√®me ou demande l√©gal"),
            discord.SelectOption(label="Ticket Remboursement", value="remboursement", description="‚û°Ô∏è Demande de remboursement"),
            discord.SelectOption(label="Ticket Candidature", value="candidature", description="‚û°Ô∏è Postuler au staff"),
            discord.SelectOption(label="Ticket Wipe", value="wipe", description="‚û°Ô∏è Demande ou litige concernant un Wipe"),
            discord.SelectOption(label="Ticket MortRP", value="mortrp", description="‚û°Ô∏è Demande de MortRP"),
            discord.SelectOption(label="Ticket D√©velopement", value="d√©velopement", description="‚û°Ô∏è Demande concernant le d√©v"),
            discord.SelectOption(label="Ticket Sc√®neRP", value="sc√®nerp", description="‚û°Ô∏è Demande de mod√©ration d'une sc√®ne ou autre"),
        ]
        super().__init__(custom_id="ticket_select", placeholder="üì© Choisis une cat√©gorie de ticket", min_values=1, max_values=1, options=options)

    async def callback(self, interaction: discord.Interaction):
        category_id = CATEGORY_IDS.get(self.values[0])
        category = interaction.guild.get_channel(category_id)
        user = interaction.user
        channel_name = f"{self.values[0]}-{user.name.lower()}"

        # V√©rifie si l‚Äôutilisateur a d√©j√† un ticket
        for channel in interaction.guild.text_channels:
            if channel.name == channel_name:
                return await interaction.response.send_message("‚ùó Tu as d√©j√† un ticket ouvert.", ephemeral=True)

        # Ajout du r√¥le staff aux permissions
        staff_role = interaction.guild.get_role(STAFF_ROLE_ID)

        overwrites = {
            interaction.guild.default_role: discord.PermissionOverwrite(view_channel=False),
            user: discord.PermissionOverwrite(view_channel=True, send_messages=True),
            interaction.guild.me: discord.PermissionOverwrite(view_channel=True, send_messages=True),
        }
        if staff_role:
            overwrites[staff_role] = discord.PermissionOverwrite(view_channel=True, send_messages=True)

        if category is None:
            return await interaction.response.send_message("‚ùå Cat√©gorie introuvable. Pr√©viens un admin.", ephemeral=True)

        # Cr√©ation du ticket
        ticket_channel = await interaction.guild.create_text_channel(
            name=channel_name,
            overwrites=overwrites,
            category=category,
            topic=f"Ticket {self.values[0]} de {user.name}"
        )

        await ticket_channel.send(
            f"üé´ Ticket ouvert par {user.mention}\nüîí Clique sur le bouton ci-dessous pour fermer le ticket.",
            view=CloseButton()
        )

        log_channel = interaction.guild.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            await log_channel.send(f"üì• Ticket `{self.values[0]}` ouvert par {user.mention} ‚Üí {ticket_channel.mention}")

        await interaction.response.send_message(f"‚úÖ Ticket cr√©√© ici : {ticket_channel.mention}", ephemeral=True)


class TicketView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(TicketSelect())

@bot.command()
async def setticket(ctx):
    await ctx.send("# üì¨ S√©lectionne une cat√©gorie de ticket :", view=TicketView())

# === GIVEAWAYS ===
@bot.command()
@commands.has_permissions(manage_guild=True)
async def giveaway(ctx, duration: str, *, prize: str):
    import re

    time_regex = re.match(r"^(\d+)([smhd])$", duration)
    if not time_regex:
        return await ctx.send("‚ùå Format invalide. Utilise `10s`, `5m`, `1h`, `1d`.")

    time_value, time_unit = int(time_regex[1]), time_regex[2]
    seconds = {"s": 1, "m": 60, "h": 3600, "d": 86400}[time_unit]
    total_seconds = time_value * seconds

    embed = discord.Embed(
        title="üéâ GIVEAWAY üéâ",
        description=f"**Prix :** {prize}\nR√©agis avec üéâ pour participer !\nDur√©e : {duration}",
        color=discord.Color.gold()
    )
    embed.set_footer(text=f"Lanc√© par {ctx.author}", icon_url=ctx.author.display_avatar.url)
    giveaway_msg = await ctx.send(embed=embed)
    await giveaway_msg.add_reaction("üéâ")

    await asyncio.sleep(total_seconds)

    message = await ctx.channel.fetch_message(giveaway_msg.id)
    users = [user async for user in message.reactions[0].users()]
    users = [user for user in users if not user.bot]

    if not users:
        return await ctx.send("‚ùå Personne n‚Äôa particip√©.")

    winner = random.choice(users)
    result_text = f"üéä F√©licitations {winner.mention}, tu as gagn√© **{prize}** !"

    # Envoie dans le salon o√π la commande a √©t√© tap√©e
    await ctx.send(result_text)

    # Envoie dans le salon Log Giveaways
    log_channel = ctx.guild.get_channel(LOG_GIVEAWAY_CHANNEL_ID)
    if log_channel:
        await log_channel.send(result_text)


# === LANCEMENT FINAL ===
token = os.environ.get("TOKEN_BOT_DISCORD")
if not token:
    print("[‚ùå ERREUR] La variable d'environnement TOKEN_BOT_DISCORD est manquante.")
else:
    bot.run(token)
